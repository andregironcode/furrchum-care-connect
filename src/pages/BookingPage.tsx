import { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { format, addDays } from 'date-fns';
import { Calendar } from '@/components/ui/calendar';
import { isValidBookingDateTime } from '@/lib/database';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { toast } from 'sonner';
import { Clock, CalendarIcon, MapPin, Star, CheckCircle, Badge as BadgeIcon, Loader2, Video as VideoIcon, Users as UsersIcon } from 'lucide-react';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/integrations/supabase/client';
// Remove duplicate import
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { createMeeting, deleteMeeting } from '@/lib/whereby';
import RazorpayCheckout from '@/components/RazorpayCheckout';
import { sendBookingNotifications } from '@/integrations/resend/bookingNotifications';

type CreateMeetingResponse = Awaited<ReturnType<typeof createMeeting>>;

interface VetDetails {
  id: string;
  first_name: string;
  last_name: string;
  specialization: string | null;
  consultation_fee: number | null;
  image_url: string | null;
  availability: string | null;
  about: string | null;
  years_experience: number | null;
  languages: string[] | null;
  rating: number | null;
  zip_code: string | null;
  clinic_location: string | null;
  offers_video_calls: boolean | null;
  offers_in_person: boolean | null;
}

// Helper function to get full name
const getVetFullName = (vet: VetDetails): string => {
  return `${vet.first_name} ${vet.last_name}`;
};

interface Pet {
  id: string;
  name: string;
  type: string;
  breed: string;
}

interface VetAvailability {
  id: string;
  day_of_week: number;
  start_time: string;
  end_time: string;
}

interface BookingData {
  id?: string;  // Auto-generated by database
  vet_id: string;
  pet_owner_id: string;
  pet_id: string | null;
  booking_date: string;  // Format: YYYY-MM-DD
  start_time: string;    // Format: HH:MM
  end_time: string;      // Format: HH:MM
  consultation_type: 'in_person' | 'video_call';
  notes: string;
  status: 'pending' | 'confirmed' | 'cancelled';
  payment_status: 'pending' | 'paid' | 'failed' | 'refunded';
  meeting_id: string | null;
  meeting_url: string | null;
  host_meeting_url: string | null;
  created_at: string;  // Format: ISO string
  updated_at: string;  // Format: ISO string
}

const BookingPage = () => {
  const { vetId } = useParams<{ vetId: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [isLoading, setIsLoading] = useState(true);
  const [vet, setVet] = useState<VetDetails | null>(null);
  const [pets, setPets] = useState<Pet[]>([]);
  const [selectedPetId, setSelectedPetId] = useState<string>('');
  const [selectedPet, setSelectedPet] = useState<Pet | null>(null);
  const [isLoadingPets, setIsLoadingPets] = useState(true);
  const [date, setDate] = useState<Date | null>(null);
  const [timeSlot, setTimeSlot] = useState<string>('');
  const [timeSlots, setTimeSlots] = useState<string[]>([]);
  const [duration, setDuration] = useState<number>(30);
  const [consultationType, setConsultationType] = useState<'in_person' | 'video_call'>('in_person');
  // Reset date when consultation type changes to force calendar refresh
  useEffect(() => {
    setDate(null);
    setTimeSlot('');
  }, [consultationType]);
  const [notes, setNotes] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [vetAvailability, setVetAvailability] = useState<VetAvailability[]>([]);
  const [isLoadingAvailability, setIsLoadingAvailability] = useState(true);
  const [bookedSlots, setBookedSlots] = useState<Record<string, string[]>>({});
  const [userProfile, setUserProfile] = useState<any>(null);
  const [showPayment, setShowPayment] = useState(false);
  const [pendingBookingId, setPendingBookingId] = useState<string | null>(null);
  // State for booking data preparation (no actual booking created yet)
  const [preparedBookingData, setPreparedBookingData] = useState<any>(null);
  const [preparedMeetingDetails, setPreparedMeetingDetails] = useState<any>(null);

  // Check user access - vets shouldn't be able to book appointments
  useEffect(() => {
    const checkUserAccess = async () => {
      if (!user) {
        toast.error("Please login to book a consultation");
        navigate('/auth', { state: { from: `/booking/${vetId}` } });
        return;
      }

      try {
        // Fetch user profile to check user type
        const { data: profile, error } = await supabase
          .from('profiles')
          .select('user_type, full_name')
          .eq('id', user.id)
          .single();

        if (error) {
          console.error('Error fetching user profile:', error);
          return;
        }

        setUserProfile(profile);

        // If user is a vet, redirect them with a message
        if (profile?.user_type === 'vet') {
          toast.error("Veterinarians cannot book appointments. You can manage your appointments from your dashboard.", {
            duration: 6000,
          });
          navigate('/vet-dashboard', { replace: true });
          return;
        }

        // If user is a pet owner, continue with normal flow
        if (profile?.user_type === 'pet_owner') {
          setIsLoading(false);
        }
      } catch (error) {
        console.error('Error checking user access:', error);
        toast.error("Failed to verify user access. Please try again.");
        navigate('/dashboard');
      }
    };

    checkUserAccess();
  }, [user, navigate, vetId]);

  const fetchVetDetails = useCallback(async () => {
    if (!vetId) return;
    
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('vet_profiles')
        .select(`
          id, 
          first_name, 
          last_name, 
          specialization, 
          consultation_fee, 
          image_url, 
          availability,
          about,
          years_experience,
          languages,
          rating,
          zip_code,
          clinic_location,
          offers_video_calls,
          offers_in_person
        `)
        .eq('id', vetId)
        .single();
      
      if (error) throw error;
      setVet(data);
    } catch (error) {
      console.error('Error fetching vet details:', error);
      toast.error('Failed to load veterinarian details');
    } finally {
      setIsLoading(false);
    }
  }, [vetId]);

  useEffect(() => {
    fetchVetDetails();
    
    // Cleanup function
    return () => {
      // Any cleanup if needed
    };
  }, [fetchVetDetails, vetId]);

  const fetchUserPets = useCallback(async () => {
    if (!user) return;
    
    setIsLoadingPets(true);
    try {
      const { data, error } = await supabase
        .from('pets')
        .select('*')
        .eq('owner_id', user.id);
      
      if (error) throw error;
      
      // Convert the data to match our Pet interface
      const formattedPets = (data || []).map(pet => ({
        id: pet.id,
        name: pet.name,
        type: pet.type,
        breed: pet.breed || ''
      }));
      
      setPets(formattedPets);
      
      // Auto-select the first pet if available
      if (formattedPets.length > 0) {
        setSelectedPetId(formattedPets[0].id);
        setSelectedPet(formattedPets[0]);
      }
    } catch (error) {
      console.error('Error fetching pets:', error);
      toast.error('Failed to load your pets');
      setPets([]);
    } finally {
      setIsLoadingPets(false);
    }
  }, [user]);

  const fetchVetAvailability = useCallback(async () => {
    if (!vetId) return;
    
    setIsLoadingAvailability(true);
    try {
      // Fetch vet's availability
      const { data: availabilityData, error: availabilityError } = await supabase
        .from('vet_availability')
        .select('*')
        .eq('vet_id', vetId)
        .eq('is_available', true)
        .order('day_of_week', { ascending: true });

      if (availabilityError) throw availabilityError;
      setVetAvailability(availabilityData || []);

      // Fetch already booked slots
      const { data: bookingsData, error: bookingsError } = await supabase
        .from('bookings')
        .select('booking_date, start_time')
        .eq('vet_id', vetId)
        .gte('booking_date', new Date().toISOString().split('T')[0]);

      if (bookingsError) throw bookingsError;

      // Group booked slots by date
      const slotsByDate = (bookingsData || []).reduce((acc, booking) => {
        const date = booking.booking_date;
        if (!acc[date]) {
          acc[date] = [];
        }
        acc[date].push(booking.start_time);
        return acc;
      }, {} as Record<string, string[]>);

      setBookedSlots(slotsByDate);
    } catch (error) {
      console.error('Error fetching availability:', error);
      toast.error('Failed to load vet availability');
    } finally {
      setIsLoadingAvailability(false);
    }
  }, [vetId]);

  // Check if a date should be disabled in the calendar
  const isDateDisabled = (date: Date) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Disable past dates
    if (date < today) return true;
    
    // Don't disable dates if we're still loading availability data
    if (isLoadingAvailability) return false;

    // Check if vet is available on this day of week
    const dayOfWeek = date.getDay();
    const isAvailable = vetAvailability.some(avail => avail.day_of_week === dayOfWeek);
    
    return !isAvailable;
  };

  // Generate time slots based on vet's availability for the selected date
  const generateTimeSlots = useCallback((selectedDate: Date) => {
    if (!vetAvailability.length) return [];
    
    const dayOfWeek = selectedDate.getDay();
    const dayAvailability = vetAvailability.find(avail => avail.day_of_week === dayOfWeek);
    
    if (!dayAvailability) return [];
    
    const slots: string[] = [];
    const [startHour, startMinute] = dayAvailability.start_time.split(':').map(Number);
    const [endHour, endMinute] = dayAvailability.end_time.split(':').map(Number);
    
    let currentHour = startHour;
    let currentMinute = startMinute;
    
    while (currentHour < endHour || (currentHour === endHour && currentMinute < endMinute)) {
      const timeString = `${currentHour.toString().padStart(2, '0')}:${currentMinute.toString().padStart(2, '0')}`;
      const dateString = format(selectedDate, 'yyyy-MM-dd');
      
      // Check if the slot is already booked
      if (!bookedSlots[dateString]?.includes(timeString)) {
        slots.push(timeString);
      }
      
      // Increment by 30 minutes
      currentMinute += 30;
      if (currentMinute >= 60) {
        currentHour++;
        currentMinute = 0;
      }
    }
    
    return slots;
  }, [vetAvailability, bookedSlots]);

  // Debug calendar state
  useEffect(() => {
    console.log('Calendar state:', {
      vetAvailability: vetAvailability.length,
      isLoadingAvailability,
      date,
      consultationType
    });
  }, [date, vetAvailability, isLoadingAvailability, consultationType]);

  // Update time slots when date changes
  useEffect(() => {
    if (date) {
      const slots = generateTimeSlots(date);
      setTimeSlots(slots);
      
      // Reset selected time if it's not in the new slots
      if (timeSlot && !slots.includes(timeSlot)) {
        setTimeSlot('');
      }
    } else {
      setTimeSlots([]);
      setTimeSlot('');
    }
  }, [date, generateTimeSlots, timeSlot]);

  // Initial data loading - only fetch data if user is verified as a pet owner
  useEffect(() => {
    if (user && userProfile?.user_type === 'pet_owner' && vetId) {
      fetchVetDetails();
      fetchUserPets();
      fetchVetAvailability();
    }
  }, [user, userProfile, vetId, fetchVetDetails, fetchUserPets, fetchVetAvailability]);

  const validateBookingDetails = () => {
    if (!selectedPetId) {
      throw new Error('Please select a pet');
    }
    if (!date) {
      throw new Error('Please select a date');
    }
    if (!timeSlot) {
      throw new Error('Please select a time slot');
    }
  };

  const createVideoMeeting = async (appointmentDate: Date): Promise<CreateMeetingResponse> => {
    if (!vet) {
      throw new Error('Vet information is not available');
    }

    // Create a start date 15 minutes before the appointment time
    // This allows users to join the meeting 15 minutes early
    const startDate = new Date(appointmentDate);
    startDate.setMinutes(startDate.getMinutes() - 15);
    
    // Set the end date based on appointment duration
    const endDate = new Date(appointmentDate);
    endDate.setMinutes(endDate.getMinutes() + duration);

    try {
      // Use a shorter room prefix - take just the first 8 characters of the vet ID
      // to avoid the 'roomNamePrefix is too long' error from Whereby API
      const shortVetId = vet.id.substring(0, 8);
      const roomPrefix = `vet-${shortVetId}`;
      
      // Log the times for debugging
      console.log('Creating meeting with times:', {
        startDate: startDate.toISOString(),
        appointmentTime: appointmentDate.toISOString(),
        endDate: endDate.toISOString(),
        duration: duration
      });
      
      const meeting = await createMeeting({
        roomNamePrefix: roomPrefix,
        startDate: startDate, // Pass the start date set to 15 minutes before appointment time
        endDate: endDate, // This is the key fix - ensuring endDate is properly provided
        fields: ['hostRoomUrl'],
        roomMode: 'group',
        roomModeProps: {
          isVideoEnabled: true,
          isChatEnabled: true,
          isScreenSharingEnabled: true,
          isHandRaiseEnabled: true
        }
      });

      if (!meeting || !meeting.roomUrl) {
        throw new Error('Failed to create meeting: Invalid response from server');
      }

      return meeting;
    } catch (error) {
      console.error('Error creating video meeting:', error);
      throw new Error('Failed to create video meeting. Please try again or select in-person consultation.');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isSubmitting) return;
    
    try {
      setIsSubmitting(true);
      setError(null);
      
      // Validate all required fields
      validateBookingDetails();
      
      if (!user?.id) {
        throw new Error('User not authenticated');
    }
    
      if (!vet) {
        throw new Error('Vet information not available');
      }
      
      // Validate booking time is in the future with proper date/time parsing
      const [hours, minutes] = timeSlot.split(':').map(Number);
      const bookingDateTime = new Date(date!);
      bookingDateTime.setHours(hours, minutes, 0, 0);
      
      const currentTime = new Date();
      console.log('Booking validation:', {
        bookingDateTime: bookingDateTime.toISOString(),
        now: currentTime.toISOString(),
        isInFuture: bookingDateTime > currentTime
      });
      
      if (bookingDateTime <= currentTime) {
        throw new Error('The selected booking time must be in the future. Please choose a different time slot.');
      }
      
      // Calculate end time (30 minutes later)
      const endHour = hours + Math.floor((minutes + 30) / 60);
      const endMinute = (minutes + 30) % 60;
      const endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;
      
      // Format times properly for database (HH:MM format)
      const startTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
      
      console.log('Time calculation:', {
        timeSlot,
        startTime,
        endTime,
        hours,
        minutes
      });
      
      // Create video meeting if needed
      let meetingDetails: CreateMeetingResponse | null = null;
      if (consultationType === 'video_call') {
        try {
          meetingDetails = await createVideoMeeting(bookingDateTime);
          console.log('Video meeting created:', meetingDetails);
        } catch (meetingError) {
          console.error('Failed to create video meeting:', meetingError);
          throw new Error('Failed to create video meeting. Please try again or select in-person consultation.');
        }
      }
      
      // Prepare booking data (don't save yet, wait for payment)
      const currentISOTime = new Date().toISOString();
        
        const bookingData = {
          vet_id: vetId,
          pet_owner_id: user.id,
          pet_id: selectedPetId || null,
        booking_date: format(date!, 'yyyy-MM-dd'),
        start_time: startTime,
          end_time: endTime,
          consultation_type: consultationType,
          notes: notes || '',
        status: 'confirmed' as const, // Will be confirmed when created after payment
        payment_status: 'paid' as const, // Will be paid when created after payment
          // Include meeting details if this is a video call
          meeting_id: meetingDetails?.meetingId || null,
          meeting_url: meetingDetails?.roomUrl || null,
          host_meeting_url: meetingDetails?.hostRoomUrl || null,
        created_at: currentISOTime,
        updated_at: currentISOTime
      };
      
      console.log('Prepared booking data (not saved yet):', bookingData);
      
      // Store prepared data and show payment modal
      setPreparedBookingData(bookingData);
      setPreparedMeetingDetails(meetingDetails);
        
      // Generate a temporary booking ID for payment processing
      const tempBookingId = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setPendingBookingId(tempBookingId);
      setShowPayment(true);
      
    } catch (error) {
      console.error('Booking preparation error:', error);
      setError(error instanceof Error ? error.message : 'An unexpected error occurred');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePaymentSuccess = async (paymentData: any) => {
    try {
      console.log('Payment successful:', paymentData);
      
      if (!preparedBookingData) {
        throw new Error('No booking data prepared');
      }
      
      // Validate that the booking date/time is still in the future
      const bookingDateTime = new Date(`${preparedBookingData.booking_date}T${preparedBookingData.start_time}`);
      const now = new Date();
      
      if (bookingDateTime <= now) {
        throw new Error('Booking time has passed. Please select a new time slot.');
      }
      
      // Add payment references to the booking data
      const finalBookingData = {
        ...preparedBookingData,
        payment_status: 'paid',
        payment_id: paymentData.razorpay_payment_id || paymentData.payment_id,
        payment_provider: 'razorpay',
        razorpay_payment_id: paymentData.razorpay_payment_id || paymentData.payment_id,
        razorpay_order_id: paymentData.razorpay_order_id || paymentData.order_id,
        updated_at: new Date().toISOString()
      };
      
      console.log('Creating booking after successful payment...');
      console.log('Final booking data:', finalBookingData);
      
      // NOW create the actual booking after successful payment
      const { data: newBooking, error: bookingError } = await supabase
          .from('bookings')
        .insert([finalBookingData])
          .select()
          .single();
        
        if (bookingError) {
        console.error('Error creating booking after payment:', bookingError);
        
        // Handle specific constraint violations
        if (bookingError.message?.includes('no_past_bookings')) {
          throw new Error('The selected booking time is no longer available. Please select a new time slot.');
        } else if (bookingError.message?.includes('duplicate')) {
          throw new Error('This time slot has already been booked. Please select a different time.');
        } else {
          throw new Error(bookingError.message || 'Failed to create booking after payment');
        }
        }
        
      if (!newBooking) {
          throw new Error('No booking data returned from server');
        }
        
      console.log('Successfully created booking after payment:', newBooking);
        
      // Link the transaction to the actual booking if we have transaction info
      if (paymentData.transaction_id && newBooking.id) {
        try {
          console.log('Linking transaction to booking...');
          const { error: linkError } = await supabase
            .from('transactions')
            .update({
              booking_id: newBooking.id,
              updated_at: new Date().toISOString()
            })
            .eq('id', paymentData.transaction_id);
          
          if (linkError) {
            console.error('Error linking transaction to booking:', linkError);
          } else {
            console.log('Transaction successfully linked to booking');
          }
        } catch (linkError) {
          console.error('Error in transaction linking process:', linkError);
        }
      }

      // Send booking confirmation email and schedule reminders
      try {
        console.log('Sending booking confirmation email...');
        const notificationResult = await sendBookingNotifications(newBooking.id);
        if (notificationResult.success) {
          console.log('Booking confirmation email sent successfully');
        } else {
          console.error('Failed to send booking confirmation email:', notificationResult.error);
          // Don't fail the booking process if email fails
        }
      } catch (emailError) {
        console.error('Error sending booking confirmation email:', emailError);
        // Don't fail the booking process if email fails
      }
        
        // Show success message
        toast.success(
          consultationType === 'video_call' 
        ? `Video consultation booked and paid successfully! Meeting details will be available in your appointments.`
        : `In-person appointment booked and paid successfully!`, 
          {
            duration: 5000,
            action: {
              label: 'View Appointments',
              onClick: () => navigate('/appointments')
            }
          }
        );
        
      // Reset form and prepared data
      setSelectedPetId('');
      setDate(null);
      setTimeSlot('');
      setNotes('');
      setShowPayment(false);
      setPendingBookingId(null);
      setPreparedBookingData(null);
      setPreparedMeetingDetails(null);
      
      // Navigate to appointments page after a short delay
      setTimeout(() => {
        navigate('/appointments');
      }, 2000);
        
    } catch (error: any) {
      console.error('Error handling payment success:', error);
      toast.error(
        error.message || 'Payment was successful but there was an error creating your booking. Please contact support with your payment details.'
      );
    }
  };

  const handlePaymentFailure = (error: any) => {
    console.error('Payment failed:', error);
    toast.error('Payment failed. Please try again.');
    setShowPayment(false);
    setPendingBookingId(null);
    setPreparedBookingData(null);
    setPreparedMeetingDetails(null);
  };

  const handlePaymentCancel = () => {
    toast.info('Payment cancelled.');
    setShowPayment(false);
    setPendingBookingId(null);
    setPreparedBookingData(null);
    setPreparedMeetingDetails(null);
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="flex flex-col items-center space-y-4">
          <Loader2 className="h-12 w-12 animate-spin text-primary" />
          <p className="text-lg font-medium">Loading vet details...</p>
        </div>
      </div>
    );
  }

  if (!vet) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-2">Vet not found</h2>
          <p className="text-muted-foreground">The requested veterinarian could not be found.</p>
          <Button className="mt-4" onClick={() => navigate('/find-vets')}>
            Back to Find Vets
          </Button>
        </div>
      </div>
    );
  }

  const formatTime = (timeString: string) => {
    const [hours, minutes] = timeString.split(':');
    const hour = parseInt(hours, 10);
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const displayHour = hour % 12 || 12;
    return `${displayHour}:${minutes} ${ampm}`;
  };

  return (
    <div className="container mx-auto p-4 max-w-6xl">
      <Button 
        variant="ghost" 
        onClick={() => navigate(-1)}
        className="mb-6"
      >
        ← Back
      </Button>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Left Column - Vet Info */}
        <div className="md:col-span-1">
          <Card>
            <CardHeader>
              <div className="flex flex-col items-center">
                {vet.image_url ? (
                  <img 
                    src={vet.image_url} 
                    alt={`${vet.first_name} ${vet.last_name}`}
                    className="w-32 h-32 rounded-full object-cover mb-4"
                  />
                ) : (
                  <div className="w-32 h-32 rounded-full bg-gray-200 flex items-center justify-center mb-4">
                    <span className="text-2xl text-gray-500">
                      {vet.first_name[0]}{vet.last_name[0]}
                    </span>
                  </div>
                )}
                <h2 className="text-xl font-bold">Dr. {vet.first_name} {vet.last_name}</h2>
                <p className="text-gray-600">{vet.specialization}</p>
                <div className="flex items-center mt-2">
                  <Star className="h-5 w-5 text-yellow-400 fill-current" />
                  <span className="ml-1 font-medium">{vet.rating}</span>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="font-medium mb-2">About</h3>
                  <p className="text-sm text-gray-600">{vet.about}</p>
                </div>
                
                <div>
                  <h3 className="font-medium mb-2">Services</h3>
                  <div className="space-y-2">
                    <div className="flex items-center">
                      <CheckCircle className="h-4 w-4 text-green-500 mr-2" />
                      <span>In-Person: {vet.offers_in_person ? 'Available' : 'Not Available'}</span>
                    </div>
                    <div className="flex items-center">
                      <VideoIcon className="h-4 w-4 text-blue-500 mr-2" />
                      <span>Video Call: {vet.offers_video_calls ? 'Available' : 'Not Available'}</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="font-medium mb-2">Contact</h3>
                  <div className="space-y-2">
                    <div className="flex items-center">
                      <MapPin className="h-4 w-4 text-gray-500 mr-2" />
                      <span>{vet.clinic_location}</span>
                    </div>
                  </div>
                </div>
                
                <div>
                  <h3 className="font-medium mb-2">Languages</h3>
                  <div className="flex flex-wrap gap-2">
                    {vet.languages?.map((lang, index) => (
                      <Badge key={index} variant="outline">{lang}</Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Right Column - Booking Form */}
        <div className="md:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Book an Appointment</CardTitle>
              <CardDescription>
                Select a date and time for your {consultationType === 'video_call' ? 'video' : 'in-person'} consultation.
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {/* Consultation Type */}
                <div className="space-y-2">
                  <Label htmlFor="consultation-type">Consultation Type</Label>
                  <RadioGroup
                    id="consultation-type"
                    value={consultationType}
                    onValueChange={(value: 'in_person' | 'video_call') => setConsultationType(value)}
                    className="grid grid-cols-2 gap-4"
                  >
                    <div>
                      <RadioGroupItem value="in_person" id="in-person" className="peer sr-only" disabled={!vet.offers_in_person} />
                      <Label
                        htmlFor="in-person"
                        className={`flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer ${!vet.offers_in_person ? 'opacity-50 cursor-not-allowed' : ''}`}
                      >
                        <UsersIcon className="mb-3 h-6 w-6" />
                        <span>In-Person</span>
                        {!vet.offers_in_person && (
                          <span className="text-xs text-muted-foreground">Not Available</span>
                        )}
                      </Label>
                    </div>
                    <div>
                      <RadioGroupItem 
                        value="video_call" 
                        id="video-call" 
                        className="peer sr-only" 
                        disabled={!vet.offers_video_calls} 
                      />
                      <Label
                        htmlFor="video-call"
                        className={`flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer ${!vet.offers_video_calls ? 'opacity-50 cursor-not-allowed' : ''}`}
                      >
                        <VideoIcon className="mb-3 h-6 w-6" />
                        <span>Video Call</span>
                        {!vet.offers_video_calls && (
                          <span className="text-xs text-muted-foreground">Not Available</span>
                        )}
                      </Label>
                    </div>
                  </RadioGroup>
                </div>

                {/* Duration Selector */}
                {consultationType === 'video_call' && (
                  <div className="space-y-2">
                    <Label htmlFor="duration">Duration</Label>
                    <Select
                      value={duration.toString()}
                      onValueChange={(value) => setDuration(Number(value))}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select duration" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="30">30 minutes</SelectItem>
                        <SelectItem value="60">1 hour</SelectItem>
                        <SelectItem value="90">1.5 hours</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}
                
                {/* Date Picker */}
                <div>
                  <h3 className="font-medium mb-2">Select Date</h3>
                  <div className="rounded-md border">
                    <Calendar
                      mode="single"
                      selected={date || undefined}
                      onSelect={(selectedDate) => {
                        if (selectedDate) {
                          setDate(selectedDate);
                        }
                      }}
                      disabled={isDateDisabled}
                      className="rounded-md border"
                      fromDate={new Date()}
                      toDate={new Date(Date.now() + 30 * 24 * 60 * 60 * 1000)} // 30 days from now
                    />
                  </div>
                </div>
                
                {/* Time Slot Picker */}
                {date && (
                  <div>
                    <h3 className="font-medium mb-2">Select Time</h3>
                    {isLoadingAvailability ? (
                      <div className="flex items-center justify-center py-4">
                        <Loader2 className="h-5 w-5 animate-spin mr-2" />
                        <span>Loading available slots...</span>
                      </div>
                    ) : timeSlots.length > 0 ? (
                      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
                        {timeSlots.map((slot) => {
                          const isBooked = bookedSlots[format(date, 'yyyy-MM-dd')]?.includes(slot);
                          return (
                            <Button
                              key={slot}
                              variant={timeSlot === slot ? 'default' : 'outline'}
                              onClick={() => !isBooked && setTimeSlot(slot)}
                              className={`h-10 ${isBooked ? 'opacity-50 cursor-not-allowed' : ''}`}
                              disabled={isBooked}
                              title={isBooked ? 'This slot is already booked' : ''}
                            >
                              {formatTime(slot)}
                              {isBooked && <span className="ml-1 text-xs">(Booked)</span>}
                            </Button>
                          );
                        })}
                      </div>
                    ) : (
                      <p className="text-sm text-muted-foreground">
                        No available time slots for this date. Please select another date.
                      </p>
                    )}
                  </div>
                )}
                
                {/* Pet Selection */}
                <div>
                  <h3 className="font-medium mb-2">Select Pet</h3>
                  {isLoadingPets ? (
                    <div className="flex items-center justify-center h-20">
                      <Loader2 className="h-6 w-6 animate-spin" />
                    </div>
                  ) : pets.length > 0 ? (
                    <Select 
                      value={selectedPetId} 
                      onValueChange={(value) => {
                        setSelectedPetId(value);
                        const selectedPet = pets.find(pet => pet.id === value);
                        if (selectedPet) {
                          setSelectedPet(selectedPet);
                        }
                      }}
                      disabled={isLoadingPets || pets.length === 0}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select a pet" />
                      </SelectTrigger>
                      <SelectContent>
                        {pets.map((petItem) => (
                          <SelectItem key={petItem.id} value={petItem.id}>
                            {petItem.name} ({petItem.type})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  ) : (
                    <div className="text-sm text-muted-foreground">
                      No pets found. Please add a pet to your profile first.
                      <Button 
                        variant="link" 
                        className="p-0 ml-2 h-auto"
                        onClick={() => navigate('/my-pets')}
                      >
                        Add Pet
                      </Button>
                    </div>
                  )}
                </div>
                
                {/* Notes */}
                <div>
                  <h3 className="font-medium mb-2">Notes (Optional)</h3>
                  <Textarea
                    placeholder="Any specific concerns or details you'd like to share with the veterinarian?"
                    value={notes}
                    onChange={(e) => setNotes(e.target.value)}
                    rows={4}
                  />
                </div>
                
                {/* Summary */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h3 className="font-medium mb-2">Appointment Summary</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Date:</span>
                      <span>{date ? format(date, 'PPP') : 'Not selected'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Time:</span>
                      <span>{timeSlot ? formatTime(timeSlot) : 'Not selected'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Type:</span>
                      <span className="capitalize">
                        {consultationType === 'video_call' ? 'Video Call' : 'In-Person'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Pet:</span>
                      <span>{selectedPet?.name || 'Not selected'}</span>
                    </div>
                    <Separator className="my-2" />
                    <div className="flex justify-between font-medium">
                      <span>Consultation Fee:</span>
                      <span>₹{(vet.consultation_fee || 171).toFixed(2)}</span>
                    </div>
                  </div>
                </div>
                
                {/* Submit Button */}
                <form onSubmit={handleSubmit} className="w-full">
                  <Button 
                    type="submit"
                    className="w-full"
                    disabled={isSubmitting || !selectedPetId || !date || !timeSlot}
                    size="lg"
                  >
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        {consultationType === 'video_call' ? 'Creating Meeting...' : 'Booking...'}
                      </>
                    ) : (
                      <>
                        {consultationType === 'video_call' ? (
                          <>
                            <VideoIcon className="mr-2 h-4 w-4" />
                            Book Video Call (₹{(vet.consultation_fee || 171).toFixed(2)})
                          </>
                        ) : (
                          <>
                            <UsersIcon className="mr-2 h-4 w-4" />
                            Book In-Person (₹{(vet.consultation_fee || 171).toFixed(2)})
                          </>
                        )}
                      </>
                    )}
                  </Button>
                </form>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {showPayment && pendingBookingId && user && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-lg w-full max-h-[90vh] overflow-y-auto">
            <div className="p-4 border-b">
              <h2 className="text-xl font-semibold">Complete Payment</h2>
              <p className="text-gray-600 text-sm">Secure your appointment with payment</p>
            </div>
            <div className="p-4">
              <RazorpayCheckout
                bookingData={{
                  bookingId: pendingBookingId,
                  vetId: vetId!,
                  vetName: getVetFullName(vet),
                  petId: selectedPetId!,
                  petName: pets.find(p => p.id === selectedPetId)?.name || 'Pet',
                  userId: user.id,
                  userEmail: user.email || '',
                  userName: user.user_metadata?.full_name || userProfile?.full_name || 'User',
                  userContact: userProfile?.phone_number || '9999999999',
                  consultationMode: consultationType,
                  consultationType: consultationType,
                  date: date ? format(date, 'PPP') : '',
                  timeSlot: timeSlot,
                  fee: (() => {
                    const fee = vet?.consultation_fee || 0;
                    console.log('🔍 BookingPage Debug:', {
                      'vet.consultation_fee': vet?.consultation_fee,
                      'fee being passed to RazorpayCheckout': fee
                    });
                    return fee;
                  })(),
                }}
                onSuccess={handlePaymentSuccess}
                onFailure={handlePaymentFailure}
                onCancel={handlePaymentCancel}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BookingPage;
